% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dot.R
\name{._}
\alias{._}
\title{Pass first argument as dot to run code in second argument for pipe operators that do not natively support dot-replacement scheme (base R pipe operator)}
\usage{
._(x, expr)
}
\arguments{
\item{x}{Object to pass to \code{expr} as dot (\code{.}).}

\item{expr}{Expression to execute, containing \code{.} as a placeholder.}
}
\value{
The result from executing \code{expr} in the parent environment.
}
\description{
Pass first argument as dot to run code in second argument for pipe operators that do not natively support dot-replacement scheme (base R pipe operator)
}
\details{
The function has a side-effect to assign \code{x} as \code{.} and unevaluated \code{expr} as \code{.call} in the calling environment. Therefore, make sure you do not use \code{.} or \code{.call} there for something else. In case \code{expr} fails in the middle of a series of chained pipes, you can inspect \code{.} and \code{.call} or possibly rerun a modified version of the instruction that failed on it for easier debugging purpose.
}
\examples{
# The function is really supposed to be use in a pipe instruction
# This example only runs on R >= 4.1
\dontrun{
# lm has data = as second argument, which does not fit well with the pipe |>
# In R 4.1, one should write:
iris |> \(.)(lm(data = ., Sepal.Length ~ Petal.Length + Species))()
# which is not very elegant ! With ._() it is more concise and straighforward
iris |> ._(lm(data = ., Sepal.Length ~ Petal.Length + Species))
}
}
